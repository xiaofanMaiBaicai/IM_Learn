connect 链接流程

1 初始化方法：
- (instancetype)initWithDelegate:(id<GCDAsyncSocketDelegate>)aDelegate delegateQueue:(dispatch_queue_t)dq socketQueue:(dispatch_queue_t)sq

(1) 初始化相关数据
(2) 校验 sq 是为串行队列，此队列为stock队列，如果没有的话，就创建一个串行队列
(3) 初始化一个键值，IsOnSocketQueueOrTargetQueueKey = &IsOnSocketQueueOrTargetQueueKey; 初始化一个键值，IsOnSocketQueueOrTargetQueueKey为静态变量，指向自己的地址，

    在 GCDAsyncSocket 中，IsOnSocketQueueOrTargetQueueKey 是一个用于标识当前操作是否在 Socket 队列或目标队列上的键值。这种写法是为了确保多线程环境下的线程安全性。

    IsOnSocketQueueOrTargetQueueKey 实际上是一个指向静态变量的指针，它用作一个唯一的键值，用于在 GCDAsyncSocket 类的实例中保存和获取相关信息。在 Objective-C 中，静态变量的地址可以被用作键值，以便在多个方法和线程之间传递和共享数据。

    为了更好地理解这个用法，让我们看看 GCDAsyncSocket 是如何使用它的。在 GCDAsyncSocket 的实现中，经常会用到一个叫做 socketQueue 的串行队列，用于管理所有的 Socket 操作。这个队列是一个私有队列，确保了在队列上的所有操作都是按顺序执行的，从而保证了线程安全性。

    在 GCDAsyncSocket 的实现中，有一些方法可以在任何线程上调用，但它们内部需要确定当前操作是否在 socketQueue 上执行。为了实现这个目的，IsOnSocketQueueOrTargetQueueKey 被用作一个上下文键，存储在相关操作的 GCD 队列上。

    在每个方法中，可以通过检查当前线程是否在 socketQueue 上来确定是否在正确的队列上执行。如果不在 socketQueue 上，它将检查当前线程是否在目标队列上执行，目标队列是方法的参数之一。这个检查是通过判断 IsOnSocketQueueOrTargetQueueKey 键对应的值是否为真来进行的。这样，就能保证操作在正确的队列上执行，避免了线程安全问题。

    总结一下，IsOnSocketQueueOrTargetQueueKey 的写法是为了提供一种简单而可靠的方法，用于判断当前操作是否在正确的队列上执行，以确保 GCDAsyncSocket 在多线程环境下的线程安全性。    

(4) dispatch_queue_set_specific(socketQueue, IsOnSocketQueueOrTargetQueueKey, nonNullUnusedPointer, NULL);

    是一个 GCD（Grand Central Dispatch）函数，用于在指定的调度队列上设置特定的上下文信息，

    void *nonNullUnusedPointer = (__bridge void *)self; 指向self的指针
    在 socketQueue 队列上，通过 IsOnSocketQueueOrTargetQueueKey key 设定上下文，绑定 nonNullUnusedPointer 上下文信息，产生关联

(5) 初始化其他相关参数


2 链接
- (BOOL)connectToHost:(NSString *)inHost onPort:(uint16_t)port viaInterface:(NSString *)inInterface withTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr

相关参数解答：
(NSString *)inHost：这个参数是目标主机的名称或IP地址。如果你提供的是一个主机名称（例如，"www.google.com"），那么GCDAsyncSocket会首先尝试将这个主机名称解析为一个IP地址，然后再尝试连接。

(uint16_t)port：这个参数是目标主机上你想要连接的端口号。端口号是一个16位的无符号整数，范围从0到65535。一般来说，你会连接到一些已知的端口号，比如HTTP服务的端口80，或者HTTPS服务的端口443。

(NSString *)inInterface：这个参数用来指定你想要用来建立连接的网络接口。大多数情况下，你可以将这个参数设为nil，这样系统就会自动选择一个可用的接口。但是在一些特殊的情况下，你可能会需要选择一个特定的接口，比如在一个有多个网络接口的设备上。

(NSTimeInterval)timeout：这个参数用来设定连接超时时间，单位为秒。如果在这个时间内无法建立到目标主机的连接，那么这个连接就会被认为是失败的。

(NSError **)errPtr：这是一个指向NSError对象指针的指针，用来在连接失败的情况下接收错误信息。如果连接失败，这个NSError对象就会被创建并通过这个指针返回。如果你不关心失败的原因，你可以将这个参数设为NULL。

总的来说，这个方法就是用指定的网络接口去连接到一个特定的主机和端口，并在超时时间内等待连接的建立。如果连接成功，这个方法就会返回YES；如果连接失败，这个方法就会返回NO，并通过errPtr参数返回一个描述失败原因的NSError对象。

流程：
(1) 校验host
(2) 常规前置检查 ，东西较多，重点来记录一下
- (BOOL)preConnectWithInterface:(NSString *)interface error:(NSError **)errPtr
1) 无代理报错
2) 无代理队列报错
3) 当前为链接状态，报错
4) 都不支持ipv4 与 ipv6 报错
5) 如果有 interface 会进行特殊处理
6) 清除读写队列

interface 的特殊处理

在这里如果我们interface这个参数不为空话，我们会额外多执行一些操作。
首先来讲讲这个参数是什么，简单来讲，这个就是我们设置的本机IP+端口号。照理来说我们是不需要去设置这个参数的，默认的为localhost(127.0.0.1)本机地址。而端口号会在本机中取一个空闲可用的端口。
而我们一旦设置了这个参数，就会强制本地IP和端口为我们指定的。其实这样设置反而不好，其实大家也能想明白，这里端口号如果我们写死，万一被其他进程给占用了。那么肯定是无法连接成功的。
所以就有了我们做IM的时候，一般是不会去指定客户端bind某一个端口。而是用系统自动去选择

这里的特殊处理的方法  本地地址绑定方法
- (void)getInterfaceAddress4:(NSMutableData **)interfaceAddr4Ptr address6:(NSMutableData **)interfaceAddr6Ptr fromDescription:(NSString *)interfaceDescription port:(uint16_t)port

1) 先将 interfaceDescription 分割，可能会包含host 与 port ，将 host 设置给interface 然后如果在interfaceDescription 中拿到了host··并且传进来的port 为0 ，就使用 然后如果在interfaceDescription 中的，否则使用 指定的port

2) 如果 interface 最后为 nil ， 则使用 INADDR_ANY：0.0.0.0,不确定地址，或者任意地址 
   如果 interface 为 localhost 或者 loopback 则设置为 127.0.0.1
   非localhost、loopback，去获取本机IP，看和传进来Interface是同名或者同IP，相同才给赋端口号，

3) 获取本地的所以ip地址
定义结构体指针，这个指针是本地IP
struct ifaddrs *addrs;
const struct ifaddrs *cursor;
获取到本机IP，为0说明成功了
if ((getifaddrs(&addrs) == 0)){}
//赋值
cursor = addrs;
//如果IP不为空，则循环链表去设置
while (cursor != NULL) {
	
}
cursor 通过链表，来记载多个ip地址相关数据的结构体 ，这其中包括 ipv4 , ipv6 ，还有可能有多个网卡··那就会获取多个ip地址··

至此这个本机地址绑定我们就做完了，我们前面也说过，一般我们作为客户端，是不需要做这一步的。如果我们不绑定，系统会自己绑定本机IP，并且选择一个空闲可用的端口。所以这个方法是iOS用来作为服务端调用的。

         